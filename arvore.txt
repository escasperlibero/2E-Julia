class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if key < root.key:
            root.left = insert(root.left, key)
        else:
            root.right = insert(root.right, key)
    return root

def minValueNode(node):
    current = node
    while current.left is not None:
        current = current.left
    return current

def deleteNode(root, key):
    if root is None:
        return root
    
    if key < root.key:
        root.left = deleteNode(root.left, key)
    elif key > root.key:
        root.right = deleteNode(root.right, key)
    else:
        if root.left is None:
            return root.right
        elif root.right is None:
            return root.left
        root.key = minValueNode(root.right).key
        root.right = deleteNode(root.right, root.key)
    
    return root

def inorderTraversal(root):
    if root:
        inorderTraversal(root.left)
        print(root.key, end=' ')
        inorderTraversal(root.right)

# Lista1
lista1 = [45, 20, 30, 60, 81, 97, 100, 7, 8, 4]
tree1 = None
for value in lista1:
    tree1 = insert(tree1, value)

# Adicionar um valor na Lista1
valor_adicionar_lista1 = 50
tree1 = insert(tree1, valor_adicionar_lista1)

# Remover um valor na Lista1 (com dois filhos)
valor_remover_lista1 = 60
tree1 = deleteNode(tree1, valor_remover_lista1)

# Exibir árvore1 após adicionar e remover
print("Árvore 1 após adicionar e remover:")
inorderTraversal(tree1)
print("\n")

# Lista2
lista2 = [15, 6, 18, 3, 7, 16, 20, 4]
tree2 = None
for value in lista2:
    tree2 = insert(tree2, value)

# Adicionar um valor na Lista2
valor_adicionar_lista2 = 10
tree2 = insert(tree2, valor_adicionar_lista2)

# Remover um valor na Lista2 (sem dois filhos)
valor_remover_lista2 = 16
tree2 = deleteNode(tree2, valor_remover_lista2)

# Exibir árvore2 após adicionar e remover
print("Árvore 2 após adicionar e remover:")
inorderTraversal(tree2)
